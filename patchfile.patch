From 41ec708643dd57375047e9d9565a98170afaaa51 Mon Sep 17 00:00:00 2001
From: jatin-rathee <jatinrathee2018@gmail.com>
Date: Thu, 18 Jun 2020 15:18:41 +0530
Subject: [PATCH] completed task

---
 src/App.js      |  78 +++++++-------
 src/Board.js    | 262 +++++++++++++++++++++++++++++++++++-------------
 src/Card.js     |  36 ++++---
 src/Swimlane.js |  45 +++++----
 4 files changed, 276 insertions(+), 145 deletions(-)

diff --git a/src/App.js b/src/App.js
index 18bcba9..623b8f1 100755
--- a/src/App.js
+++ b/src/App.js
@@ -6,49 +6,49 @@ import Board from './Board';
 import './App.css';
 
 class App extends Component {
-  constructor(props) {
-    super(props);
-    this.state = {
-      selectedTab: 'home',
-    };
-  }
-  renderShippingRequests() {
-    return (<Board />);
-  }
+	constructor(props) {
+		super(props);
+		this.state = {
+			selectedTab: 'home',
+		};
+	}
+	renderShippingRequests() {
+		return <Board />;
+	}
 
-  renderNavigation() {
-    return (<Navigation
-      onClick={(tabName) => this.changeTab(tabName)}
-      selectedTab={this.state.selectedTab}
-      />);
-  }
+	renderNavigation() {
+		return (
+			<Navigation
+				onClick={tabName => this.changeTab(tabName)}
+				selectedTab={this.state.selectedTab}
+			/>
+		);
+	}
 
-  renderTabContent() {
-    switch(this.state.selectedTab) {
-      case 'home':
-      default:
-        return HomeTab();
-      case 'shipping-requests':
-        return this.renderShippingRequests();
-    }
-  }
-  render() {
-    return (
-      <div className="App">
-        {this.renderNavigation()}
+	renderTabContent() {
+		switch (this.state.selectedTab) {
+			case 'home':
+			default:
+				return HomeTab();
+			case 'shipping-requests':
+				return this.renderShippingRequests();
+		}
+	}
+	render() {
+		return (
+			<div className='App'>
+				{this.renderNavigation()}
 
-        <div className="App-body">
-          {this.renderTabContent()}
-        </div>
-      </div>
-    );
-  }
+				<div className='App-body'>{this.renderTabContent()}</div>
+			</div>
+		);
+	}
 
-  changeTab(tabName) {
-    this.setState({
-      selectedTab: tabName,
-    });
-  }
+	changeTab(tabName) {
+		this.setState({
+			selectedTab: tabName,
+		});
+	}
 }
 
 export default App;
diff --git a/src/Board.js b/src/Board.js
index 1f00045..39f516c 100644
--- a/src/Board.js
+++ b/src/Board.js
@@ -5,74 +5,198 @@ import Swimlane from './Swimlane';
 import './Board.css';
 
 export default class Board extends React.Component {
-  constructor(props) {
-    super(props);
-    const clients = this.getClients();
-    this.state = {
-      clients: {
-        backlog: clients.filter(client => !client.status || client.status === 'backlog'),
-        inProgress: clients.filter(client => client.status && client.status === 'in-progress'),
-        complete: clients.filter(client => client.status && client.status === 'complete'),
-      }
-    }
-    this.swimlanes = {
-      backlog: React.createRef(),
-      inProgress: React.createRef(),
-      complete: React.createRef(),
-    }
-  }
-  getClients() {
-    return [
-      ['1','Stark, White and Abbott','Cloned Optimal Architecture', 'in-progress'],
-      ['2','Wiza LLC','Exclusive Bandwidth-Monitored Implementation', 'complete'],
-      ['3','Nolan LLC','Vision-Oriented 4Thgeneration Graphicaluserinterface', 'backlog'],
-      ['4','Thompson PLC','Streamlined Regional Knowledgeuser', 'in-progress'],
-      ['5','Walker-Williamson','Team-Oriented 6Thgeneration Matrix', 'in-progress'],
-      ['6','Boehm and Sons','Automated Systematic Paradigm', 'backlog'],
-      ['7','Runolfsson, Hegmann and Block','Integrated Transitional Strategy', 'backlog'],
-      ['8','Schumm-Labadie','Operative Heuristic Challenge', 'backlog'],
-      ['9','Kohler Group','Re-Contextualized Multi-Tasking Attitude', 'backlog'],
-      ['10','Romaguera Inc','Managed Foreground Toolset', 'backlog'],
-      ['11','Reilly-King','Future-Proofed Interactive Toolset', 'complete'],
-      ['12','Emard, Champlin and Runolfsdottir','Devolved Needs-Based Capability', 'backlog'],
-      ['13','Fritsch, Cronin and Wolff','Open-Source 3Rdgeneration Website', 'complete'],
-      ['14','Borer LLC','Profit-Focused Incremental Orchestration', 'backlog'],
-      ['15','Emmerich-Ankunding','User-Centric Stable Extranet', 'in-progress'],
-      ['16','Willms-Abbott','Progressive Bandwidth-Monitored Access', 'in-progress'],
-      ['17','Brekke PLC','Intuitive User-Facing Customerloyalty', 'complete'],
-      ['18','Bins, Toy and Klocko','Integrated Assymetric Software', 'backlog'],
-      ['19','Hodkiewicz-Hayes','Programmable Systematic Securedline', 'backlog'],
-      ['20','Murphy, Lang and Ferry','Organized Explicit Access', 'backlog'],
-    ].map(companyDetails => ({
-      id: companyDetails[0],
-      name: companyDetails[1],
-      description: companyDetails[2],
-      status: companyDetails[3],
-    }));
-  }
-  renderSwimlane(name, clients, ref) {
-    return (
-      <Swimlane name={name} clients={clients} dragulaRef={ref}/>
-    );
-  }
+	constructor(props) {
+		super(props);
+		const clients = this.getClients();
+		this.state = {
+			clients: {
+				backlog: clients.filter(
+					client => !client.status || client.status === 'backlog'
+				),
+				inProgress: clients.filter(
+					client => client.status && client.status === 'in-progress'
+				),
+				complete: clients.filter(
+					client => client.status && client.status === 'complete'
+				),
+			},
+		};
+		this.swimlanes = {
+			backlog: React.createRef(),
+			inProgress: React.createRef(),
+			complete: React.createRef(),
+		};
+	}
+	componentDidMount() {
+		const { backlog, inProgress, complete } = this.swimlanes;
+		let containers = [
+			backlog.current,
+			inProgress.current,
+			complete.current,
+		];
+		let drake = Dragula({ containers });
+		drake.on('drop', (el, target) => {
+			const lane = target.previousSibling.innerHTML;
+			if (lane === 'Backlog')
+				this.changeCardAttributes(el, 'grey', 'backlog');
+			else if (lane === 'In Progress')
+				this.changeCardAttributes(el, 'blue', 'in-progress');
+			else if (lane === 'Complete')
+				this.changeCardAttributes(el, 'green', 'complete');
+			console.log('el:', el);
+		});
+	}
+	changeCardAttributes(el, color, status) {
+		el.className = `Card Card-${color}`;
+		el.dataset.status = status;
+	}
+	getClients() {
+		return [
+			[
+				'1',
+				'Stark, White and Abbott',
+				'Cloned Optimal Architecture',
+				'in-progress',
+			],
+			[
+				'2',
+				'Wiza LLC',
+				'Exclusive Bandwidth-Monitored Implementation',
+				'complete',
+			],
+			[
+				'3',
+				'Nolan LLC',
+				'Vision-Oriented 4Thgeneration Graphicaluserinterface',
+				'backlog',
+			],
+			[
+				'4',
+				'Thompson PLC',
+				'Streamlined Regional Knowledgeuser',
+				'in-progress',
+			],
+			[
+				'5',
+				'Walker-Williamson',
+				'Team-Oriented 6Thgeneration Matrix',
+				'in-progress',
+			],
+			['6', 'Boehm and Sons', 'Automated Systematic Paradigm', 'backlog'],
+			[
+				'7',
+				'Runolfsson, Hegmann and Block',
+				'Integrated Transitional Strategy',
+				'backlog',
+			],
+			['8', 'Schumm-Labadie', 'Operative Heuristic Challenge', 'backlog'],
+			[
+				'9',
+				'Kohler Group',
+				'Re-Contextualized Multi-Tasking Attitude',
+				'backlog',
+			],
+			['10', 'Romaguera Inc', 'Managed Foreground Toolset', 'backlog'],
+			[
+				'11',
+				'Reilly-King',
+				'Future-Proofed Interactive Toolset',
+				'complete',
+			],
+			[
+				'12',
+				'Emard, Champlin and Runolfsdottir',
+				'Devolved Needs-Based Capability',
+				'backlog',
+			],
+			[
+				'13',
+				'Fritsch, Cronin and Wolff',
+				'Open-Source 3Rdgeneration Website',
+				'complete',
+			],
+			[
+				'14',
+				'Borer LLC',
+				'Profit-Focused Incremental Orchestration',
+				'backlog',
+			],
+			[
+				'15',
+				'Emmerich-Ankunding',
+				'User-Centric Stable Extranet',
+				'in-progress',
+			],
+			[
+				'16',
+				'Willms-Abbott',
+				'Progressive Bandwidth-Monitored Access',
+				'in-progress',
+			],
+			[
+				'17',
+				'Brekke PLC',
+				'Intuitive User-Facing Customerloyalty',
+				'complete',
+			],
+			[
+				'18',
+				'Bins, Toy and Klocko',
+				'Integrated Assymetric Software',
+				'backlog',
+			],
+			[
+				'19',
+				'Hodkiewicz-Hayes',
+				'Programmable Systematic Securedline',
+				'backlog',
+			],
+			[
+				'20',
+				'Murphy, Lang and Ferry',
+				'Organized Explicit Access',
+				'backlog',
+			],
+		].map(companyDetails => ({
+			id: companyDetails[0],
+			name: companyDetails[1],
+			description: companyDetails[2],
+			status: 'backlog',
+		}));
+	}
+	renderSwimlane(name, clients, ref) {
+		return <Swimlane name={name} clients={clients} dragulaRef={ref} />;
+	}
 
-  render() {
-    return (
-      <div className="Board">
-        <div className="container-fluid">
-          <div className="row">
-            <div className="col-md-4">
-              {this.renderSwimlane('Backlog', this.state.clients.backlog, this.swimlanes.backlog)}
-            </div>
-            <div className="col-md-4">
-              {this.renderSwimlane('In Progress', this.state.clients.inProgress, this.swimlanes.inProgress)}
-            </div>
-            <div className="col-md-4">
-              {this.renderSwimlane('Complete', this.state.clients.complete, this.swimlanes.complete)}
-            </div>
-          </div>
-        </div>
-      </div>
-    );
-  }
+	render() {
+		return (
+			<div className='Board'>
+				<div className='container-fluid'>
+					<div className='row'>
+						<div className='col-md-4'>
+							{this.renderSwimlane(
+								'Backlog',
+								this.state.clients.backlog,
+								this.swimlanes.backlog
+							)}
+						</div>
+						<div className='col-md-4'>
+							{this.renderSwimlane(
+								'In Progress',
+								this.state.clients.inProgress,
+								this.swimlanes.inProgress
+							)}
+						</div>
+						<div className='col-md-4'>
+							{this.renderSwimlane(
+								'Complete',
+								this.state.clients.complete,
+								this.swimlanes.complete
+							)}
+						</div>
+					</div>
+				</div>
+			</div>
+		);
+	}
 }
diff --git a/src/Card.js b/src/Card.js
index a8ad663..2f22601 100644
--- a/src/Card.js
+++ b/src/Card.js
@@ -2,19 +2,23 @@ import React from 'react';
 import './Card.css';
 
 export default class Card extends React.Component {
-  render() {
-    let className = ['Card'];
-    if (this.props.status === 'backlog') {
-      className.push('Card-grey');
-    } else if (this.props.status === 'in-progress') {
-      className.push('Card-blue');
-    } else if (this.props.status === 'complete') {
-      className.push('Card-green');
-    }
-    return (
-      <div className={className.join(' ')} data-id={this.props.id} data-status={this.props.status}>
-        <div className="Card-title">{this.props.name}</div>
-      </div>
-    );
-  }
-}
\ No newline at end of file
+	render() {
+		let className = ['Card'];
+		if (this.props.status === 'backlog') {
+			className.push('Card-grey');
+		} else if (this.props.status === 'in-progress') {
+			className.push('Card-blue');
+		} else if (this.props.status === 'complete') {
+			className.push('Card-green');
+		}
+		return (
+			<div
+				className={className.join(' ')}
+				data-id={this.props.id}
+				data-status={this.props.status}
+			>
+				<div className='Card-title'>{this.props.name}</div>
+			</div>
+		);
+	}
+}
diff --git a/src/Swimlane.js b/src/Swimlane.js
index 7e6e0d0..df8445a 100644
--- a/src/Swimlane.js
+++ b/src/Swimlane.js
@@ -3,25 +3,28 @@ import Card from './Card';
 import './Swimlane.css';
 
 export default class Swimlane extends React.Component {
-  render() {
-    const cards = this.props.clients.map(client => {
-      return (
-        <Card
-          key={client.id}
-          id={client.id}
-          name={client.name}
-          description={client.description}
-          status={client.status}
-        />
-      );
-    })
-    return (
-      <div className="Swimlane-column">
-        <div className="Swimlane-title">{this.props.name}</div>
-        <div className="Swimlane-dragColumn" ref={this.props.dragulaRef}>
-          {cards}
-        </div>
-      </div>);
-  }
-
+	render() {
+		const cards = this.props.clients.map(client => {
+			return (
+				<Card
+					key={client.id}
+					id={client.id}
+					name={client.name}
+					description={client.description}
+					status={client.status}
+				/>
+			);
+		});
+		return (
+			<div className='Swimlane-column'>
+				<div className='Swimlane-title'>{this.props.name}</div>
+				<div
+					className='Swimlane-dragColumn'
+					ref={this.props.dragulaRef}
+				>
+					{cards}
+				</div>
+			</div>
+		);
+	}
 }
-- 
2.17.1

